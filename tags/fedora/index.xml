<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fedora on David Hamp-Gonsalves</title>
    <link>https://davidhampgonsalves.github.io/tags/fedora/index.xml</link>
    <description>Recent content in Fedora on David Hamp-Gonsalves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://davidhampgonsalves.github.io/tags/fedora/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building Dolphin-Emu on Fedora</title>
      <link>https://davidhampgonsalves.github.io/posts/dolphin-emu-on-fedora/</link>
      <pubDate>Sun, 20 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/dolphin-emu-on-fedora/</guid>
      <description>&lt;p&gt;Over the holidays I wanted to play some old game cube games to be festive(Christmas means new games). After some performance troubles I noticed that the version of the Dolphin Emulator I was using from the Fedora repos was version 3 and the current was 3.5. Eventually I broke down and built the latest version, which did make my life/performance better.&lt;/p&gt;

&lt;p&gt;Bellow is the &lt;strong&gt;command to install all the build dependancies&lt;/strong&gt; and after that the build should go smoothy and you&amp;rsquo;ll be up and running in no time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install build-essentials git cmake-fedora gcc-c++ wxGTK-devel SDL-devel Cg bluez-libs-devel readline-devel alsa-lib-devel pulseaudio-libs-devel libao-devel openal-soft-devel ffmpeg-devel glew-devel lzo-devel portaudio-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that you can follow the official guide &lt;a href=&#34;https://code.google.com/p/dolphin-emu/wiki/Linux_Build&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Node.js / NPM on Fedora Core 17</title>
      <link>https://davidhampgonsalves.github.io/posts/install-node/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/install-node/</guid>
      <description>

&lt;p&gt;This is just a short and sweet set of commands to install Nodejs and NPM on Fedora 17.&lt;/p&gt;

&lt;h2 id=&#34;versions&#34;&gt;Versions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fedora Core 17&lt;/li&gt;
&lt;li&gt;node.js 0.8.9&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-guts-go-bash-go&#34;&gt;The Guts(go bash go!)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install openssl-devel.i686 gcc gcc-c++
sudo ./configure
sudo make -j2
sudo make install

su
cd /tmp
git clone https\://github.com/isaacs/npm.git
cd npm
make install
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Most of this was based on an older post I found &lt;a href=&#34;http://johnroach.info/2011/11/20/installing-node-js-0-6-2-on-fedora-16/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iterative Javascript QuickSelect</title>
      <link>https://davidhampgonsalves.github.io/posts/javascript-quickselect/</link>
      <pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/javascript-quickselect/</guid>
      <description>

&lt;p&gt;A couple weeks ago I entered my first AI related contest, hosted by &lt;a href=&#34;http://www.scribd.com/jobs/botrace&#34;&gt;scribd&lt;/a&gt;. The contest was great for beginners since it involved a very simple world and control scheme.&lt;/p&gt;

&lt;p&gt;At some point in by bot creation process I needed to determine the n-th highest number in an Array. While for such a simple project I probably should have just thrown some loops together and moved on, but since the project was just I started researching the problem and Hoare&amp;rsquo;s Selection Algorithm. I wasn&amp;rsquo;t able to find a Javascript implementation so I ported a Java version() which in turn had been ported over from the book &lt;em&gt;&amp;ldquo;Numerical Recipes in C: The Art of Scientific Computing&amp;rdquo;&lt;/em&gt;. The best part about this implementation is that unlike most, it isn&amp;rsquo;t recursive. This makes it more verbose but much more interesting and it avoids any stack depth restrictions that browser vendors may impose.&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//javascript implementation of quickselect
function quickSelect( array, k ) {
    var left = 0, right = array.length - 1;

    while( true ) {
        if( right &amp;lt;= left + 1 ) {
         if( right === left + 1 &amp;amp;&amp;amp; array[right] &amp;lt; array[left] )
         swap( array, left, right );
         return array[k];
        } else {
            //the unsigned bitshift has the effect of dividing by 2
            //and discarding any remainder
         var middle = ( left + right ) &amp;gt;&amp;gt;&amp;gt; 1;
         swap( array, middle, left + 1 );

         if( array[ left ] &amp;gt; array[ right ] )
         swap( array, left, right );

         if( array[ left + 1 ] &amp;gt; array[ right ] )
         swap( array, left + 1, right );

         if( array[ left ] &amp;gt; array[ left + 1 ] )
         swap( array, left, left + 1 );

         var i = left + 1, j = right;
         var pivot = array[ i ];
         while( true ) {
             i++;
         while( array[ i ] &amp;lt; pivot )
             i++;

             j--;
         while( array[ j ] &amp;gt; pivot )
             j--;

         if( j &amp;lt; i )
         break;
         swap(array, i, j);
         }
         array[left + 1] = array[j];
         array[j] = pivot;

         if( j &amp;gt;= k )
         right = j - 1;

         if( j &amp;lt;= k )
left = i;
}
    }
}

function swap( array, i, j ) {
    var temp = array[ i ];
    array[ i ] = array[ j ];
    array[ j ] = temp;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>