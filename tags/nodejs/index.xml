<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on David Hamp-Gonsalves</title>
    <link>https://davidhampgonsalves.github.io/tags/nodejs/index.xml</link>
    <description>Recent content in Nodejs on David Hamp-Gonsalves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://davidhampgonsalves.github.io/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Javascript Damerau Levenshtein Algorithim</title>
      <link>https://davidhampgonsalves.github.io/posts/damerau-levenshtein/</link>
      <pubDate>Tue, 20 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/damerau-levenshtein/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance&#34;&gt;Damerau Levenshtein&lt;/a&gt; algorithim calculates a distance between two words in the same way that basic Levenshtein does but adds transpositions to the set of operations that it uses to calculate distance. This makes it much more reliable at finding similiar or alternate spellings of words.&lt;/p&gt;

&lt;p&gt;I was doing some nodejs work lately and needed such a function to clean up one of my datasets and so I ported this version from C# to Javascript.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enjoy!&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; damerauLevenshteinDistance(source, target) {
  &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!source || source.length === 0)
    &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!target || target.length === 0)
      &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; 0;
    &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt;
      &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; target.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!target)
    &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; source.length;

  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; sourceLength = source.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; targetLength = target.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; score = [];

  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; INF = sourceLength + targetLength;
  score[0] = [INF];
  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt;= sourceLength ; i++) { score[i + 1] = []; score[i + 1][1] = i; score[i + 1][0] = INF; }
  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt;= targetLength ; i++) { score[1][i + 1] = i; score[0][i + 1] = INF; }

  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; sd = {};
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; combinedStrings = source + target;
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; combinedStringsLength = combinedStrings.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt; combinedStringsLength ; i++) {
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; letter = combinedStrings[i];
    &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!sd.hasOwnProperty(letter))
      sd[letter] = 0;
  }

  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=1 ; i &amp;lt;= sourceLength ; i++) {
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; DB = 0;
    &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; j=1 ; j &amp;lt;= targetLength ; j++) {
      &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i1 = sd[target[j - 1]];
      &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; j1 = DB;

      &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (source[i - 1] == target[j - 1]) {
        score[i + 1][j + 1] = score[i][j];
        DB = j;
      }
      &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt;
        score[i + 1][j + 1] = Math.min(score[i][j], Math.min(score[i + 1][j], score[i][j + 1])) + 1;

      score[i + 1][j + 1] = Math.min(score[i + 1][j + 1], score[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));
    }
    sd[source[i - 1]] = i;
  }
  &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; score[sourceLength + 1][targetLength + 1];
}
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Install Node.js / NPM on Fedora Core 17</title>
      <link>https://davidhampgonsalves.github.io/posts/install-node/</link>
      <pubDate>Thu, 18 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/install-node/</guid>
      <description>

&lt;p&gt;This is just a short and sweet set of commands to install Nodejs and NPM on Fedora 17.&lt;/p&gt;

&lt;h2 id=&#34;versions&#34;&gt;Versions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fedora Core 17&lt;/li&gt;
&lt;li&gt;node.js 0.8.9&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-guts-go-bash-go&#34;&gt;The Guts(go bash go!)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo yum install openssl-devel.i686 gcc gcc-c++
sudo ./configure
sudo make -j2
sudo make install

su
cd /tmp
git clone https&lt;span style=&#34;font-weight: bold; font-style: italic&#34;&gt;\:&lt;/span&gt;//github.com/isaacs/npm.git
cd npm
make install
exit
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Most of this was based on an older post I found &lt;a href=&#34;http://johnroach.info/2011/11/20/installing-node-js-0-6-2-on-fedora-16/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iterative Javascript QuickSelect</title>
      <link>https://davidhampgonsalves.github.io/posts/javascript-quickselect/</link>
      <pubDate>Fri, 08 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/javascript-quickselect/</guid>
      <description>

&lt;p&gt;A couple weeks ago I entered my first AI related contest, hosted by &lt;a href=&#34;http://www.scribd.com/jobs/botrace&#34;&gt;scribd&lt;/a&gt;. The contest was great for beginners since it involved a very simple world and control scheme.&lt;/p&gt;

&lt;p&gt;At some point in by bot creation process I needed to determine the n-th highest number in an Array. While for such a simple project I probably should have just thrown some loops together and moved on, but since the project was just I started researching the problem and Hoare&amp;rsquo;s Selection Algorithm. I wasn&amp;rsquo;t able to find a Javascript implementation so I ported a Java version() which in turn had been ported over from the book &lt;em&gt;&amp;ldquo;Numerical Recipes in C: The Art of Scientific Computing&amp;rdquo;&lt;/em&gt;. The best part about this implementation is that unlike most, it isn&amp;rsquo;t recursive. This makes it more verbose but much more interesting and it avoids any stack depth restrictions that browser vendors may impose.&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-style: italic&#34;&gt;//javascript implementation of quickselect&lt;/span&gt;
&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; quickSelect( array, k ) {
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; left = 0, right = array.length - 1;

    &lt;span style=&#34;font-weight: bold&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;font-weight: bold&#34;&gt;true&lt;/span&gt; ) {
        &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( right &amp;lt;= left + 1 ) {
         &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( right === left + 1 &amp;amp;&amp;amp; array[right] &amp;lt; array[left] )
         swap( array, left, right );
         &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; array[k];
        } &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;font-style: italic&#34;&gt;//the unsigned bitshift has the effect of dividing by 2&lt;/span&gt;
            &lt;span style=&#34;font-style: italic&#34;&gt;//and discarding any remainder&lt;/span&gt;
         &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; middle = ( left + right ) &amp;gt;&amp;gt;&amp;gt; 1;
         swap( array, middle, left + 1 );

         &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( array[ left ] &amp;gt; array[ right ] )
         swap( array, left, right );

         &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( array[ left + 1 ] &amp;gt; array[ right ] )
         swap( array, left + 1, right );

         &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( array[ left ] &amp;gt; array[ left + 1 ] )
         swap( array, left, left + 1 );

         &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i = left + 1, j = right;
         &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; pivot = array[ i ];
         &lt;span style=&#34;font-weight: bold&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;font-weight: bold&#34;&gt;true&lt;/span&gt; ) {
             i++;
         &lt;span style=&#34;font-weight: bold&#34;&gt;while&lt;/span&gt;( array[ i ] &amp;lt; pivot )
             i++;

             j--;
         &lt;span style=&#34;font-weight: bold&#34;&gt;while&lt;/span&gt;( array[ j ] &amp;gt; pivot )
             j--;

         &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( j &amp;lt; i )
         &lt;span style=&#34;font-weight: bold&#34;&gt;break&lt;/span&gt;;
         swap(array, i, j);
         }
         array[left + 1] = array[j];
         array[j] = pivot;

         &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( j &amp;gt;= k )
         right = j - 1;

         &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;( j &amp;lt;= k )
left = i;
}
    }
}

&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; swap( array, i, j ) {
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; temp = array[ i ];
    array[ i ] = array[ j ];
    array[ j ] = temp;
}
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>