<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metadata on David Hamp-Gonsalves</title>
    <link>https://davidhampgonsalves.github.io/tags/metadata/index.xml</link>
    <description>Recent content in Metadata on David Hamp-Gonsalves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://davidhampgonsalves.github.io/tags/metadata/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Injecting Live Metadata with Wowza (1/3)</title>
      <link>https://davidhampgonsalves.github.io/posts/wowza-live-metadata/</link>
      <pubDate>Wed, 03 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/wowza-live-metadata/</guid>
      <description>

&lt;p&gt;This is the first post in a series about injecting JSON based metadata into a live RTP streams using Wowza Media Server, Adobe Flex and OSMF.&lt;/p&gt;

&lt;h2 id=&#34;what-we-re-building&#34;&gt;What We&amp;rsquo;re Building&lt;/h2&gt;

&lt;p&gt;Over the course of these posts I&amp;rsquo;ll cover how to trigger a event with associated JSON data from a flash object via a NetConnection which then in turn cause Wowza to inject the related data into the live &lt;a href=&#34;http://en.wikipedia.org/wiki/Real-time_Transport_Protocol&#34;&gt;RTP&lt;/a&gt; media stream and then finally to listen for and handle that event on the client side &lt;a href=&#34;http://www.osmf.org/&#34;&gt;OSMF&lt;/a&gt; based video player.&lt;/p&gt;

&lt;h2 id=&#34;developing-with-wowza&#34;&gt;Developing with Wowza&lt;/h2&gt;

&lt;p&gt;Before we start you need to get set up. We&amp;rsquo;ll be working on the Wowza Server injection first so you&amp;rsquo;ll need to install and configure Wowza Server and the Wowza IDE which is all well documented and available on the Wowza site.&lt;/p&gt;

&lt;p&gt;At the time of writing I was using Wowza IDE version 2.0 and Wowza Server version 2.2.4.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-wowza&#34;&gt;Setting up Wowza&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re new to Wowza you&amp;rsquo;ll want to look at the demos provided and the great documentation they have on their site.&lt;/p&gt;

&lt;p&gt;Otherwise you&amp;rsquo;ll want to set up a &lt;em&gt;&amp;ldquo;live-rtp&amp;rdquo;&lt;/em&gt; streaming application which we&amp;rsquo;ll be using for this project.
Metadata Injection Module
Wowza uses modules to extends the servers functionally. In our case we&amp;rsquo;ll need to create a Module which will add a method that can be called by our flash broadcaster client to inject data into our live stream.&lt;/p&gt;

&lt;p&gt;Create a Wowza Media Server Project  First we need to create a project in the Wowza IDE. You&amp;rsquo;ll need to define your package name and also which methods your module with override which in our case is none since we&amp;rsquo;ll be creating our own.&lt;/p&gt;

&lt;p&gt;Create our Remotely Callable Method  Now that we have our empty module we just need to add the code to inject the metadata event. This method will be called using a NetConnection from the flash object we&amp;rsquo;ll create later.&lt;/p&gt;

&lt;p&gt;This code gets the stream that matches the passed in parameters and injects the associated metadata into it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;void&lt;/span&gt; injectEvent(IClient client, RequestFunction function,
			AMFDataList params) {

		String streamname = params.getString(PARAM1);
		AMFDataObj question = params.getObject(PARAM2);

		IMediaStream stream = client.getAppInstance().getStreams()
			.getStream(streamname);
		&lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(stream != &lt;span style=&#34;font-weight: bold&#34;&gt;null&lt;/span&gt;) {
			System.out.println(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot;event injected into &amp;quot;&lt;/span&gt; + streamname);
			stream.sendDirect(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot;question&amp;quot;&lt;/span&gt;, question);
		} &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt;
			System.out.println(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot;stream &amp;quot;&lt;/span&gt; + streamname + &lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot; wasn&amp;#39;t found to inject into&amp;quot;&lt;/span&gt;);
	}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Deploying our Module Wowza modules are jar archives which live in the servers lib directory. You can either have Wowza IDE deploy your change automatically or you can build it and then move i manually depending on your situation and where your media server is. In a later post I&amp;rsquo;ll cover how to deploy on EC2 as well.&lt;/p&gt;

&lt;p&gt;Hooking Up the Module Finally we need to tell Wowza about our module. This is configured in the Application.xml file which resides in the conf directory in the Wowza server root. Add your module to the existing list of Modules by copying one of the existing entries and changing the Name, Description and Class fields to match your module.&lt;/p&gt;

&lt;h2 id=&#34;closing&#34;&gt;Closing&lt;/h2&gt;

&lt;p&gt;So by this point you should have Wowza running with a module that you can&amp;rsquo;t really even use or test. Not to fear in the next post I&amp;rsquo;ll cover how to call the module and have it inject JSON data into the stream.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Live Metadata Handling Using OSMF (3/3)</title>
      <link>https://davidhampgonsalves.github.io/posts/wowza-live-metadata-3/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/wowza-live-metadata-3/</guid>
      <description>

&lt;p&gt;This is the third post in a series about injecting JSON based metadata into a live RTP streams using Wowza Media Server, Adobe Flex and OSMF.&lt;/p&gt;

&lt;h2 id=&#34;what-we-ve-built&#34;&gt;What We&amp;rsquo;ve Built&lt;/h2&gt;

&lt;p&gt;So far in the previous posts(1,2) we setup Wowza and created a module which will inject our JSON metadata into our live RTP stream. Then we created a flash object to trigger the event injection with our metadata from the browser.&lt;/p&gt;

&lt;h2 id=&#34;what-we-re-building-in-this-post&#34;&gt;What We&amp;rsquo;re Building (in this post)&lt;/h2&gt;

&lt;p&gt;In this post we&amp;rsquo;ll be reacting to the metadata event to preform related actions on the streaming clients browser. We&amp;rsquo;ll keep the flash to a minimum by converting the metadata action script object to JSON and passing it off to our javascript handler. In this way we can add or modify the reactions associated with the metadata without having to rebuild or modify our player.&lt;/p&gt;

&lt;h2 id=&#34;working-with-osmf&#34;&gt;Working with OSMF&lt;/h2&gt;

&lt;p&gt;Since by now you should already have flash builder installed you&amp;rsquo;ll now just need to get the OSMF libraries from osmf.org. At the time of writing I was using version 1.5.&lt;/p&gt;

&lt;p&gt;Once you have the library you just need to add the OSMF.swc to your projects build path. This is done by right clicking your project and selecting &amp;ldquo;properties&amp;rdquo;. Then select &amp;ldquo;build path&amp;rdquo; and add the library.&lt;/p&gt;

&lt;p&gt;Depending if you want to convert your data to JSON and pass it off to some javascript you can also grab the as3corelib which will help with the Action Script object to JSON conversion.&lt;/p&gt;

&lt;h2 id=&#34;adding-metadata-handling-to-osmf-s-lightweightvideoelement&#34;&gt;Adding Metadata Handling to OSMF&amp;rsquo;s LightweightVideoElement&lt;/h2&gt;

&lt;p&gt;To handle our event we need to use OSMF NetClient. Our players NetClient wont be ready until the player is ready to play so we set up our handler by overriding the processReadyState method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; processReadyState()\:void {
    &lt;span style=&#34;font-weight: bold&#34;&gt;super&lt;/span&gt;.processReadyState();
    client.addHandler(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot;question&amp;quot;&lt;/span&gt;, onMetaData);
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s really the only change we need to make. Our onMetadata will be called when metadata is received and because its embedded in the media stream it will be in sync.&lt;/p&gt;

&lt;p&gt;To actually do something with the metadata you can convert it to JSON like bellow and call an external javascript function of your choosing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; onMetadata(data&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:Object)&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:&lt;span style=&#34;font-weight: bold&#34;&gt;void&lt;/span&gt; {
	&lt;span style=&#34;font-style: italic&#34;&gt;//convert the question to json and call javascript handler&lt;/span&gt;
	&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; dataToJSON&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:Object = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; Object();

	dataToJSON.text = data.text;
	dataToJSON.type = data.type;
	dataToJSON.duration = data.duration;
	dataToJSON.attributes = data.attributes;

	&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; dataJSON&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:String = JSON.encode(dataToJSON);
	ExternalInterface.call(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot;onData&amp;quot;&lt;/span&gt;, dataJSON);
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;closing&#34;&gt;Closing&lt;/h2&gt;

&lt;p&gt;Over these last three posts we&amp;rsquo;ve build a system that allows us to stream a live event and in (near) real time inject data of our choosing which will then be injected into our RTP stream by Wowza and be displayed in the users browser.&lt;/p&gt;

&lt;p&gt;This is a pretty useful technique and so far I&amp;rsquo;ve only see it used to trigger next slide events in presentation software. The sky is the limit with this one I think.&lt;/p&gt;

&lt;h2 id=&#34;code-finally&#34;&gt;Code (finally)&lt;/h2&gt;

&lt;p&gt;The code is safely tucked away in &lt;a href=&#34;https://github.com/davidhampgonsalves/Wowza-Metadata-Injection-Demo&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>