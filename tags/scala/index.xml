<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on David Hamp-Gonsalves</title>
    <link>https://davidhampgonsalves.github.io/tags/scala/index.xml</link>
    <description>Recent content in Scala on David Hamp-Gonsalves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://davidhampgonsalves.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Connecting to SVN with Scala/Java</title>
      <link>https://davidhampgonsalves.github.io/posts/scala-svn/</link>
      <pubDate>Thu, 25 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/scala-svn/</guid>
      <description>

&lt;p&gt;I needed to do some SVN scraping recently to automate the detection of certain areas of code and this is what I learned.&lt;/p&gt;

&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SVNKit&lt;/strong&gt; was too low level for my(and I suggest most) needs. I found I was writing quite a bit of code for relatively simple actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SvnClientAdapter&lt;/strong&gt; provides a simplified interface for either the cmd line client, SVNJavahl or SVNKit. Its my recommendation that for most projects this is the best way to go. In my case I used SVNJavaHL as my low level SVN library.&lt;/p&gt;

&lt;h2 id=&#34;download&#34;&gt;Download&lt;/h2&gt;

&lt;p&gt;The SVNClientAdaptor library were hard at the time of writing but are available as dependencies in the related Apache project SVNAnt: &lt;em&gt;subclipse.tigris.org/source/browse/subclipse/trunk/svnant/lib&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;svnjavahl.jar&lt;/li&gt;
&lt;li&gt;svnClientAdapter.jar&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usage-setup&#34;&gt;Usage: Setup&lt;/h2&gt;

&lt;p&gt;I was working in Scala for my project but the conversion to Java is trivial.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;	SvnKitClientAdapterFactory.setup();
	//To create the SVN client we first need to tell it what type of client to use.
	//Letting it choose whatever is availiable is usually fine unless you have both
	//and want to force it to use something specific
	val clientType\:String = SVNClientAdapterFactory.getPreferredSVNClientType();
	val svnClient\:ISVNClientAdapter = SVNClientAdapterFactory.createSVNClient(clientType);

	//add whatever authentication your repositor requires(if any)
	svnClient.setUsername(&amp;quot;&amp;lt;your user name&amp;gt;&amp;quot;);
	svnClient.setPassword(&amp;quot;&amp;lt;your password&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Now that we have a svn client object we can do some work. If your familiar with SVN this part very straight forward. In my case I was listing directories and searching for files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;var svnDirs\: Array[ISVNDirEntry] = svnClient.getList(new SVNUrl(&amp;quot;&amp;lt;SVN repository URL&amp;gt;&amp;quot;), SVNRevision.HEAD, false)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is a short post because its a short topic. Once you&amp;rsquo;ve got your libraries in the classpath and the client instantiated its smooth sailing. Automating SVN mapping, organization and monitoring can save you a lot of time in a big organization/repository.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>