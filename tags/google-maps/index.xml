<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Maps on David Hamp-Gonsalves</title>
    <link>https://davidhampgonsalves.github.io/tags/google-maps/index.xml</link>
    <description>Recent content in Google Maps on David Hamp-Gonsalves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://davidhampgonsalves.github.io/tags/google-maps/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Drawing Region Polygons on Google Maps API v.3</title>
      <link>https://davidhampgonsalves.github.io/posts/polygons_and_google_maps/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/polygons_and_google_maps/</guid>
      <description>

&lt;p&gt;You can &amp;ldquo;draw&amp;rdquo; all sorts of stuff on Google Maps using Layers but mor simply you can also directly create polygons and with a bit of extra work make them looks pretty cool. In this case I&amp;rsquo;m tracing a country using data from the &lt;a href=&#34;https://www.google.com/fusiontables/DataSource?docid=1UGwYogqtxVPga_76rxpL38CO1U6tr2s6Z0wSaQ&#34;&gt;Natural Earth Google Fusion Tables Dataset&lt;/a&gt;. Here is the final product showing &lt;a href=&#34;http://www.iswhere.us/new_york.html&#34;&gt;where New York is&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;drawing-a-polygon&#34;&gt;Drawing a Polygon&lt;/h2&gt;

&lt;p&gt;The Natural Earth Dataset provides outline coordinates using the EPSG 4326 projection. We can build our polygon(s) with those points like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; regionCoords = [];
&lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt; data.length ; i++)
	regionCoords.push(&lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLng(data[i][1], data[i][0]);

&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; overlayOptions = {
  paths&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;: regionCoords,
  strokeColor&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot;#FF0000&amp;quot;&lt;/span&gt;
};
&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; regionOverlay = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.Polygon(overlayOptions);
regionOverlay.setMap(map);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;In the above code we are building an array of LatLng points(notice the Natural Earth Dataset uses Long/Lat format so we need to flip the order of the values). Then we are overlaying them on our map.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;positioning-and-centering-map&#34;&gt;Positioning and Centering Map&lt;/h2&gt;

&lt;p&gt;To display the map at a position and scale so that our polygon(s) are visiable we need to create a bounds object that contains our polygon(s).&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; regionBounds = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLngBounds();
&lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt; data.length ; i++) {
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; point = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLng(data[i][1], data[i][0]);
  regionBounds.extend(point);
}

&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; allPolygonBounds = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLngBounds();

&lt;span style=&#34;font-style: italic&#34;&gt;//combine all of your polygons together into a single bounds object that contains them all using union&lt;/span&gt;
allPolygonBounds.union(regionBounds);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;In the above code we are creating a combined bounds object that we can center our map on at a scale that all polygons are visiable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We center and scale the map like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;map.fitBounds(allPolygonBounds);
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;creating-pretty-polygons&#34;&gt;Creating Pretty Polygons&lt;/h2&gt;

&lt;p&gt;You can create some nice looking polygons by drawing multiple polygons on top of each other in conjustion with the &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/3.exp/reference#StrokePosition&#34;&gt;google.maps.StrokePosition&lt;/a&gt;. In the case of our [where is British Columbia] example, I&amp;rsquo;m using two polygons with different stroke opacity and stroke position to create a faded outline and fill.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>