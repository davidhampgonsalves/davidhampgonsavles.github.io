<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on David Hamp-Gonsalves</title>
    <link>https://davidhampgonsalves.github.io/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on David Hamp-Gonsalves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="https://davidhampgonsalves.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Dynamic CSS Reset</title>
      <link>https://davidhampgonsalves.github.io/posts/css-reset/</link>
      <pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/css-reset/</guid>
      <description>&lt;p&gt;When ever you ever have to inject HTML into an unknown page you have to battle with all the page styles messing with your own content. This happens a lot when building bookmarklets like my recent &lt;a href=&#34;https://davidhampgonsalves.github.io/spritz-like-rsvp-reader-bookmarklet/&#34;&gt;RSVP Reader&lt;/a&gt;. In the past you had to manually assign values for all the CSS properties that could have been set by the page. Since then then &lt;em&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/initial&#34;&gt;initial&lt;/a&gt;&lt;/em&gt; CSS property was added we can perform this reset automatically. The following is a function that resets all CSS properties for a given DOM node.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; resetStyles(node) {
    &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(!node)
        console.error(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;node was invalid\: &amp;#39;&lt;/span&gt; + node);
    &lt;span style=&#34;font-style: italic&#34;&gt;/* iterate over the DOM nodes style properties and set them to initial */&lt;/span&gt;
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; props = window.getComputedStyle(node, &lt;span style=&#34;font-weight: bold&#34;&gt;null&lt;/span&gt;);
    &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0, len=props.length ; i &amp;lt; len ; i++) {
        node.style[props] = &lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;initial&amp;#39;&lt;/span&gt;;
    }
};
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Spritz like(RSVP) Reader Bookmarklet</title>
      <link>https://davidhampgonsalves.github.io/posts/spritz-like-rsvp-reader-bookmarklet/</link>
      <pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/spritz-like-rsvp-reader-bookmarklet/</guid>
      <description>

&lt;p&gt;So after seeing &lt;a href=&#34;http://www.spritzinc.com/&#34;&gt;Spritz&lt;/a&gt; I waited for someone to whip up a nice extension so that I could try out the same technique(&lt;a href=&#34;http://en.wikipedia.org/wiki/Rapid_Serial_Visual_Presentation&#34;&gt;RSVP&lt;/a&gt;) in my brower. Since that hasn&amp;rsquo;t happened I created a bookmarklet that covers the basics so that we test this all out in real life and see how useful it really is.&lt;/p&gt;

&lt;h2 id=&#34;install&#34;&gt;install&lt;/h2&gt;

&lt;p&gt;To install drag the following link to your bookmark bar.&lt;/p&gt;

&lt;pre&gt;

&lt;a href=&#34;javascript\:(function() {    var text = getSelectedText();    if(!text) {        /* TODO\: send page to api to get only content and then read that */        /*https\://app.embed.ly*/        alert(&#39;please select some text to read.&#39;);        return;    }    var model = {        index \: 0,        lastTextChange \: new Date().getTime() - 99999999,        baseInterval \: 60000 / 500    };    setupMainContainer(model);    setupKeyboardControl(model);    updateWPM(model);    model.words = getWords(text);        read.apply(model);    function setupKeyboardControl(model) {        document.onkeydown = function(e) {            var key = e.keyCode;            /* treat up and down arrows like +/- */            if(key === 38)                key = 187;            else if(key === 40)                key = 189;            var noAction = false;            switch (key) {                case 27\:                    finish(model);                    break;                case 32\:                    /*spacebar pauses reading*/                    model.pause = !model.pause;                    break;                case 37\:                    /* jump back 20 words and then draw a single frame if paused */                    model.index = model.index &gt; 20 ? model.index-20 \: 0;                    if(model.pause)                        read.apply(model, [null, true]);                    break;                case 39\:                    /* jump forward 20 words and then draw a single frame if paused */                    model.index += 20;                    if(model.index &gt;= model.words.length)                         model.index = model.words.length-1;                    if(model.pause)                        read.apply(model, [null, true]);                    break;                case 82\:                    /*toggle rewind when &#39;r&#39; is pressed*/                    model.rewind = true;                    model.pause = false;                    break;                case 187\:                    model.baseInterval = 60000 / ((60000 / model.baseInterval) + 5);                    updateWPM(model);                    break;                case 189\:                    model.baseInterval = 60000 / ((60000 / model.baseInterval) - 5);                    updateWPM(model);                    break;                default\:                    noAction = true;            };            /* disable key propigation if its a command key */            if(!noAction)                e.preventDefault();        };        document.onkeyup = function(e) {            switch (e.keyCode) {                case 82\:                    model.rewind = false;            };        };    }    function finish(model) {        window.cancelAnimationFrame(model.nextAnimation);        if(model &amp;&amp; model.container &amp;&amp; model.container.parentNode)            model.container.parentNode.removeChild(model.container);    }    function updateWPM(model, baseInterval) {        if(!baseInterval)            baseInterval = model.baseInterval;        model.wpmContainer.innerHTML = Math.floor(60000 / baseInterval) + &#39;wpm&#39;;    };    function getWords(text) {        return text.split(/[\s]+/g).filter(nonEmpty);    };    function splitWord(word) {        if(word.length === 1)            return [&#39;&#39;, word, &#39;&#39;];        var pivot = 1;        switch (word.length) {            case 0\:            case 1\:            pivot = 0;            break;            case 2\:            case 3\:            case 4\:            case 5\:            pivot = 1;            break;            case 6\:            case 7\:            case 8\:            case 9\:            pivot = 2;            break;            case 10\:            case 11\:            case 12\:            case 13\:            pivot = 3;            break;            default\:            pivot = 4;        };        return [word.substring(0,pivot), word.substring(pivot, pivot+1), word.substring(pivot+1)];    };    function nonEmpty(x) {        return x.length &gt; 0;    };    function read(time, isSingleFrame) {        var now = new Date().getTime();        if(!isSingleFrame &amp;&amp; ((new Date().getTime() - this.lastTextChange) &lt; this.nextInterval || model.pause)) {            this.nextAnimation = window.requestAnimationFrame(read.bind(this));            return;        }        var word = this.words[this.index];        var wordParts = splitWord(word);        var center = this.canvas.width / 2;        var charWidth = this.canvasContext.measureText(wordParts[1]).width;        var vAlign = this.canvas.height / 2;        this.canvasContext.clearRect (0, 0, this.canvas.width, this.canvas.height);                this.canvasContext.fillStyle = &#39;black&#39;;        this.canvasContext.textAlign = &#39;right&#39;;        this.canvasContext.fillText(wordParts[0], center - (charWidth/2), vAlign);        this.canvasContext.textAlign = &#39;center&#39;;        this.canvasContext.fillStyle = &#39;red&#39;;        this.canvasContext.fillText(wordParts[1], center, vAlign);        this.canvasContext.fillStyle = &#39;black&#39;;        this.canvasContext.textAlign = &#39;left&#39;;        this.canvasContext.fillText(wordParts[2], center + (charWidth/2), vAlign);        if(!this.rewind) {            if((this.index + 1) &lt; this.words.length)                this.index += 1;        } else if(this.index &gt; 0)            this.index -= 1;        this.lastTextChange = now;        /* this should be moved to a different structure that runs all the rules and only builds the regex once */        if(this.index &lt; 5) {            this.nextInterval = this.baseInterval * (5 - this.index);        } else if(/.[^a-zA-Z\d\s\:]./.test(word)) {            /* slow down for weird(special chars) words */            this.nextInterval = this.baseInterval * 1.3;        } else if(word.length &gt; 7) {            /* slow down for longer words */            this.nextInterval = this.baseInterval * 1.1;        } else if(/^[^a-zA-Z\d\s\:]/.test(word)) {            /* slow down for beginning of quote or pharagraph or werid chars */            this.nextInterval = this.baseInterval * 1.3;        } else if(/[^a-zA-Z\d\s\:]$/.test(word)) {            this.nextInterval = this.baseInterval * 1.3;        } else {            this.nextInterval = this.baseInterval;        }        console.log(this.nextInterval);        if(!isSingleFrame)            this.nextAnimation = window.requestAnimationFrame(read.bind(this));    };    function applyStylesToNode(node, styles) {        resetStyles(node);        /*TODO\: add base reset styles first*/        for(var attr in styles) {            node.style[attr]=styles[attr];         }    };    function resetStyles(node) {        if(!node)            console.error(&#39;node was invalid\: &#39; + node);        /*reset all css*/        var props = window.getComputedStyle(node, null);        for(var i=0, len=props.length ; i &lt; len ; i++) {            node.style[props] = &#39;initial&#39;;        }    };    function getSelectedText() {        var html = null;        if (typeof window.getSelection != &#39;undefined&#39;) {            var sel = window.getSelection();            if (sel.rangeCount) {                var container = document.createElement(&#39;div&#39;);                for (var i = 0, len = sel.rangeCount; i &lt; len; ++i) {                    container.appendChild(sel.getRangeAt(i).cloneContents());                }                html = container.innerHTML;            }        } else if (typeof document.selection != &#39;undefined&#39;) {            if (document.selection.type == &#39;Text&#39;) {                html = document.selection.createRange().htmlText;            }        }        var tmp = document.createElement(&#39;DIV&#39;);        tmp.innerHTML = html;        return tmp.textContent || tmp.innerText;    };    function setupMainContainer(model) {                var container = document.getElementById(&#39;davidhampgonsalves-container-1234kj1;2l3k4j&#39;);                /* remove lost containers(caused by clicking bookmarklet multiple times) */        if(container) {            if(container.parentNode)                container.parentNode.removeChild(container);        }        container = document.createElement(&#39;div&#39;);        container.setAttribute(&#39;id&#39;, &#39;davidhampgonsalves-container-1234kj1;2l3k4j&#39;);            var styles = {position\:&#39;fixed&#39;,            display\:&#39;table&#39;,            border\: &#39;20px solid #333&#39;,            background\:&#39;#EEE&#39;,             width\: &#39;400px&#39;,             height\:&#39;150px&#39;,             top\:&#39;50%&#39;,             left\:&#39;50%&#39;,             &#39;margin-top&#39;\:&#39;-100px&#39;,             &#39;margin-left&#39;\:&#39;-150px&#39;,            &#39;font-family&#39;\:&#39;Arial&#39;,            &#39;font-size&#39;\:&#39;15px&#39;,            &#39;text-align&#39;\: &#39;center&#39;,            &#39;z-index&#39; \: &#39;9999999999999999999&#39;        };        applyStylesToNode(container, styles);         var wordContainer = document.createElement(&#39;canvas&#39;);        applyStylesToNode(wordContainer, {height\: &#39;150px&#39;, width\:&#39;300px&#39;});        model.canvas = wordContainer;        model.canvasContext = wordContainer.getContext(&#39;2d&#39;);        model.canvasContext.font=&#39;30px Georgia&#39;;        model.wpmContainer = document.createElement(&#39;div&#39;);        applyStylesToNode(model.wpmContainer, {margin\:&#39;10px&#39;, &#39;text-align&#39;\:&#39;left&#39;, width\:&#39;100px&#39;, position\:&#39;absolute&#39;, bottom\:&#39;0&#39;, left\:&#39;0&#39;});        var aboutLink =  document.createElement(&#39;a&#39;);        aboutLink.appendChild(document.createTextNode(&#39;?&#39;));        aboutLink.href=&#39;http\://www.davidhampgonsalves.com/spritz-like-rsvp-reader-bookmarklet/&#39;;        aboutLink.target=&#39;_blank&#39;;        applyStylesToNode(aboutLink, {margin\:&#39;10px&#39;, &#39;text-align&#39;\:&#39;right&#39;, width\:&#39;100px&#39;, position\:&#39;absolute&#39;, bottom\:&#39;0&#39;, right\:&#39;0&#39;, &#39;text-decoration&#39;\: &#39;none&#39;});        container.appendChild(wordContainer);        container.appendChild(model.wpmContainer);        container.appendChild(aboutLink);        document.body.appendChild(container);        model.container = container;    };}());&#34;&gt;RSVP&lt;/a&gt;

&lt;/pre&gt;

&lt;h2 id=&#34;instructions&#34;&gt;Instructions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Select some text on a page and click the bookmarklet.&lt;/li&gt;
&lt;li&gt;Read like the wind!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;key-bindings&#34;&gt;Key Bindings&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ESC&lt;/strong&gt;: exit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;R(hold)&lt;/strong&gt;: rewind.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;←/→&lt;/strong&gt;: jump forward or back by 20 words.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-/+&lt;/strong&gt; or &lt;strong&gt;↑/↓&lt;/strong&gt;: adjust WPM rate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spacebar&lt;/strong&gt;: pause/resume.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Smooth acceleration on start up.&lt;/li&gt;
&lt;li&gt;Variable speed when reading long words, punctuation, etc.&lt;/li&gt;
&lt;li&gt;Spritz like word centering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;notes&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m sure Spritz is way better then this simple bookmarklet. This isn&amp;rsquo;t a comment on how easy this technology is. To do it properly it would take a look of statistics and reading analysis and a lot of science which I think is what Spritz has done. This is just a very basic tool that I built to try out the concept of RSVP and see how useful it is.&lt;/p&gt;

&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;All the code(&amp;lt; 300 lines of Javascript) is availiable on &lt;a href=&#34;https://github.com/davidhampgonsalves/rsvp-bookmarklet&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compressing JSON into a Brittle Lightweight String</title>
      <link>https://davidhampgonsalves.github.io/posts/compress-json.js/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/compress-json.js/</guid>
      <description>

&lt;p&gt;Client side single page apps tend to throw a lot of JSON data across the internet. These are some techniques I used on &lt;a href=&#34;http://crimeheatmap.ca&#34;&gt;cimrheatmap.ca&lt;/a&gt; to compress my Geo/Time data by about &lt;strong&gt;90%&lt;/strong&gt; and avoided the overhead of gzipping the page. Be warned most of this was just for fun and is a silly idea because of the disadvantages listed bellow.
&lt;code&gt;{lat\:45.123, lng\:-63.123, type\: &#39;Assult&#39;, timestamp\: &#39;1383837388112&#39;}&lt;/code&gt; vs. &lt;code&gt;&#39;3   0  &#39;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;maps-vs-arrays&#34;&gt;Maps vs. Arrays&lt;/h2&gt;

&lt;p&gt;Standard JSON compression usually focuses on flatening the maps that are normally used to represent objects. This removes all the duplciate keys.
* There are some nice plugins to help, like &lt;a href=&#34;https://github.com/sapienlab/jsonpack&#34;&gt;json pack&lt;/a&gt;.
In our case we have a fixed number of items in our map so we can convert it to an array and toss our keys.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[45.123, -63.123, &#39;Assult&#39;, &#39;1383837388112&#39;]&lt;/code&gt;
This resulted in a savings of &lt;strong&gt;%36&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;type-identifiers-to-digits&#34;&gt;Type Identifiers to Digits&lt;/h2&gt;

&lt;p&gt;Type identifiers can also result in some easy savings if you have a higher item count than types.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[45.123, -63.123, 0, &#39;1383837388112&#39;]&lt;/code&gt;
Replacing &amp;lsquo;Assult&amp;rsquo; with 0 results in a savings of &lt;strong&gt;%16&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;rounded-timestamps-to-date-parts&#34;&gt;Rounded Timestamps to Date Parts&lt;/h2&gt;

&lt;p&gt;In many cases we don&amp;rsquo;t require timestamps to be accurate to the millisecond. In my case to the day was acceptable and also all my data fell within the same year. This allowed to be store the year seperately and only assoicate the month and day with the Geo/Time item.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[45.123, -63.123, 0, 8, 7]&lt;/code&gt;
This resulted in a savings of &lt;strong&gt;%18&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;repeating-digits&#34;&gt;Repeating Digits&lt;/h2&gt;

&lt;p&gt;Sometimes data allows us to filter out fixed digits. In my case my Latitude is always between 40-50 and my longitude is between -60-(-60). This means I can extracting these digits out(and the decimal) and replace them on the client side.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[5123, 3123, 0, 8, 7]&lt;/code&gt;
This resulted in a savings of &lt;strong&gt;%8&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;arrays-to-fixed-length-strings&#34;&gt;Arrays to Fixed Length Strings&lt;/h2&gt;

&lt;p&gt;Arrays are lighter then Maps but they still have the overhead of 3 characters plus one additional character for each element they contain. By converting my data to a fixed length string I can avoid all that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&#39;5123312300807&#39;&lt;/code&gt;
This resulted in a savings of &lt;strong&gt;%35&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;alternate-encodings&#34;&gt;Alternate Encodings&lt;/h2&gt;

&lt;p&gt;So we are getting pretty small here but we can now take advantage of only having digits by playing with our encoding.&lt;/p&gt;

&lt;p&gt;Wasting space representing each character in UTF-8(8 bits per character). Since those 8-buts can represent 255 possibilities we can represent 2 digits for each character without getting fancy by using a base 100 encoding.&lt;/p&gt;

&lt;p&gt;So current our digits are being represented using UFT-9 encoding. if we only use the first 255 characters of UTF-8 only a single byte will be sent per character. We can use  100 of those 255 options to represent 2 digits with a single character by converting our numbers to their UTF-8 charater counterparts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;String.fromCharCode(65) === &lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;.getCharCodeAt(0) === &lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;65&amp;#39;&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&#39;3   0  &#39;&lt;/code&gt;
This resulted in a savings of &lt;strong&gt;%40&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;disadvantages-of-compression&#34;&gt;Disadvantages of Compression&lt;/h2&gt;

&lt;p&gt;So for the advantage of reducing our data payload by 90% we suffered in three ways.&lt;/p&gt;

&lt;p&gt;The first is the you have to write some code to transform your data into a usable format on the client. &lt;em&gt;In my case the code was 346 characters long after minification and executing it for 1500 records on chrome takes under 10 milliseconds.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The second is that we have thrown away all the safety that comes from structured data. If we have a bug that throws anything off(even by a single character) we will be left with scrambled, unusable data from that error onwards.&lt;/p&gt;

&lt;p&gt;The third is that our data is now quite unreadable which could make debugging harder, that being said by adding 65 to each character code you can at least get into the range of displayable characters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Animated Javascript Heatmaps.js</title>
      <link>https://davidhampgonsalves.github.io/posts/animated-heatmaps.js/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/animated-heatmaps.js/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been working on a &lt;a href=&#34;http://www.crimeheatmap.ca&#34;&gt;crime heatmap animation&lt;/a&gt; lately and these are some tips for anyone else building something similar.&lt;/p&gt;

&lt;h2 id=&#34;heatmap-js&#34;&gt;Heatmap.js&lt;/h2&gt;

&lt;p&gt;For my animation I used a version of &lt;a href=&#34;https://github.com/pa7/heatmap.js/pull/35&#34;&gt;heatmap.js&lt;/a&gt; that was tweeked for animation by &lt;a href=&#34;http://alastair.is/&#34;&gt;alastair.is&lt;/a&gt;. The tweek slightly changes the look of the heatmaps but achieves a much better frame rate.&lt;/p&gt;

&lt;h2 id=&#34;the-animation&#34;&gt;The Animation&lt;/h2&gt;

&lt;p&gt;If you new to Javascript based animation you will want to read up on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame&#34;&gt;window.requestNextAnimationFrame()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a heatmap animation you need to push the current set of geo coardinates to the heatmap which corrispond with the the current animation progress.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Since the heatmaps are generated by overlaying all out points on a canvas and then colorizing them add and delete operations are slow since partial rendering isn&amp;rsquo;t supported and also because when adding new points you may result in a new maximum(darkest point) which would force an entire redraw. Because of this we set all our points at once.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For a smooth fade in effect I used a simple exponential curve algorithim using distance from cut off dates and current postion as inputs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I was seeing errors with panning/zooming using Google Maps v3 and Heatmaps.js.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-data&#34;&gt;The Data&lt;/h2&gt;

&lt;p&gt;Since these animations usually cover a lot of data you will want to keep the syntax for each geo point minimal. In my case I compromised between readability and size buy using arrays rather then objects. I also converted my timestamps to just the day of the year since thats all the data was accurate to and then randomized the hour portion to distribute the data over the day.&lt;/p&gt;

&lt;h2 id=&#34;beautifying-data&#34;&gt;Beautifying Data&lt;/h2&gt;

&lt;p&gt;I think this idea gets missed when people build heatmaps since mostly all you are doing is making data pretty. More features wont help if the whole package isn&amp;rsquo;t beautiful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Detecting Mobile Device from Javascript</title>
      <link>https://davidhampgonsalves.github.io/posts/detect-mobile-javascript/</link>
      <pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/detect-mobile-javascript/</guid>
      <description>&lt;p&gt;This is a pretty lightweight way of detecting when your javascript is living in a mobile device.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;typeof&lt;/span&gt; window.orientation != &lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;) { &lt;span style=&#34;font-style: italic&#34;&gt;/* put mobile spesific code here */&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To omit spesific devices from running this code you can also add individual checks like the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;typeof&lt;/span&gt; window.orientation != &lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &amp;amp;&amp;amp; !navigator.userAgent.match(&lt;span style=&#34;font-style: italic&#34;&gt;/iPad/i&lt;/span&gt;)) {
  &lt;span style=&#34;font-style: italic&#34;&gt;/* put mobile spesific(but not ipad) code here */&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a mix of the answers found on &lt;a href=&#34;http://stackoverflow.com/questions/11381673/javascript-solution-to-detect-mobile-browser&#34;&gt;stack overflow&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drawing Region Polygons on Google Maps API v.3</title>
      <link>https://davidhampgonsalves.github.io/posts/polygons_and_google_maps/</link>
      <pubDate>Tue, 06 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/polygons_and_google_maps/</guid>
      <description>

&lt;p&gt;You can &amp;ldquo;draw&amp;rdquo; all sorts of stuff on Google Maps using Layers but mor simply you can also directly create polygons and with a bit of extra work make them looks pretty cool. In this case I&amp;rsquo;m tracing a country using data from the &lt;a href=&#34;https://www.google.com/fusiontables/DataSource?docid=1UGwYogqtxVPga_76rxpL38CO1U6tr2s6Z0wSaQ&#34;&gt;Natural Earth Google Fusion Tables Dataset&lt;/a&gt;. Here is the final product showing &lt;a href=&#34;http://www.iswhere.us/new_york.html&#34;&gt;where New York is&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;drawing-a-polygon&#34;&gt;Drawing a Polygon&lt;/h2&gt;

&lt;p&gt;The Natural Earth Dataset provides outline coordinates using the EPSG 4326 projection. We can build our polygon(s) with those points like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; regionCoords = [];
&lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt; data.length ; i++)
	regionCoords.push(&lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLng(data[i][1], data[i][0]);

&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; overlayOptions = {
  paths&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;: regionCoords,
  strokeColor&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;: &lt;span style=&#34;font-style: italic&#34;&gt;&amp;quot;#FF0000&amp;quot;&lt;/span&gt;
};
&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; regionOverlay = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.Polygon(overlayOptions);
regionOverlay.setMap(map);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;In the above code we are building an array of LatLng points(notice the Natural Earth Dataset uses Long/Lat format so we need to flip the order of the values). Then we are overlaying them on our map.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;positioning-and-centering-map&#34;&gt;Positioning and Centering Map&lt;/h2&gt;

&lt;p&gt;To display the map at a position and scale so that our polygon(s) are visiable we need to create a bounds object that contains our polygon(s).&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; regionBounds = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLngBounds();
&lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt; data.length ; i++) {
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; point = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLng(data[i][1], data[i][0]);
  regionBounds.extend(point);
}

&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; allPolygonBounds = &lt;span style=&#34;font-weight: bold&#34;&gt;new&lt;/span&gt; google.maps.LatLngBounds();

&lt;span style=&#34;font-style: italic&#34;&gt;//combine all of your polygons together into a single bounds object that contains them all using union&lt;/span&gt;
allPolygonBounds.union(regionBounds);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;In the above code we are creating a combined bounds object that we can center our map on at a scale that all polygons are visiable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We center and scale the map like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;map.fitBounds(allPolygonBounds);
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;creating-pretty-polygons&#34;&gt;Creating Pretty Polygons&lt;/h2&gt;

&lt;p&gt;You can create some nice looking polygons by drawing multiple polygons on top of each other in conjustion with the &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/3.exp/reference#StrokePosition&#34;&gt;google.maps.StrokePosition&lt;/a&gt;. In the case of our [where is British Columbia] example, I&amp;rsquo;m using two polygons with different stroke opacity and stroke position to create a faded outline and fill.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating Bitcoins using Online Ads</title>
      <link>https://davidhampgonsalves.github.io/posts/online-ads-and-mining-bitcoins/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/online-ads-and-mining-bitcoins/</guid>
      <description>&lt;p&gt;After reading about using &lt;a href=&#34;http://threatpost.com/buy-an-ad-own-a-browser-botnet&#34;&gt;online ads to launch a javascript based DDoS attack&lt;/a&gt; I started wondering about how well such a system would do at mining bitcoins. These are my &lt;em&gt;rough calculations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From my research I&amp;rsquo;ve found there are 3 ways to mine bitcoins(compute hashes) using Javascript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;UI thread&lt;/em&gt; (I was seeing about 800 hashes/s)&lt;/li&gt;
&lt;li&gt;Multiple threads via &lt;em&gt;WebWorkers&lt;/em&gt; (I was seeing about 13000 hashes/s)&lt;/li&gt;
&lt;li&gt;Using the GPU via &lt;em&gt;WebGL&lt;/em&gt; (&lt;a href=&#34;http://caniuse.com/webgl&#34;&gt;limited browser support&lt;/a&gt; couldn&amp;rsquo;t find working example).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I based my numbers on this implementation:&lt;/em&gt; (http://bitcoin.biniok.net/gl.html) running chrome on a pentium 4. The rates are averages over 5 seconds.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll show the math for WebWorkers since they have pretty &lt;a href=&#34;http://caniuse.com/webworkers&#34;&gt;decent support&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So lets say that we want 1 Million computers calculating hashes using webworkers at a rate of 13000 hashes/s. If we &lt;em&gt;assume&lt;/em&gt; that each ad view results in 5 seconds of computing time then we can calculate the required number of ad views like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(2 592 000(seconds in month) / 5 (seconds per ad view)) * 1 000 000(number of computers required at any time)
 =
518 400 000 000(number of ad views required month)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;a href=&#34;http://www.bitcoinx.com/profit/&#34;&gt;this&lt;/a&gt; bitcoin calculator we can see that our distributed system will earn us 6326.96 USD a month negating all costs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;final numbers:&lt;/em&gt; 5 Billion pageviews &lt;strong&gt;≈&lt;/strong&gt; 6000USD&lt;/p&gt;

&lt;p&gt;So unless you can really crank up the hash rate this endeavor isn&amp;rsquo;t going to facilitate early retirement.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript Damerau Levenshtein Algorithim</title>
      <link>https://davidhampgonsalves.github.io/posts/damerau-levenshtein/</link>
      <pubDate>Tue, 20 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/damerau-levenshtein/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance&#34;&gt;Damerau Levenshtein&lt;/a&gt; algorithim calculates a distance between two words in the same way that basic Levenshtein does but adds transpositions to the set of operations that it uses to calculate distance. This makes it much more reliable at finding similiar or alternate spellings of words.&lt;/p&gt;

&lt;p&gt;I was doing some nodejs work lately and needed such a function to clean up one of my datasets and so I ported this version from C# to Javascript.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enjoy!&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; damerauLevenshteinDistance(source, target) {
  &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!source || source.length === 0)
    &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!target || target.length === 0)
      &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; 0;
    &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt;
      &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; target.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!target)
    &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; source.length;

  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; sourceLength = source.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; targetLength = target.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; score = [];

  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; INF = sourceLength + targetLength;
  score[0] = [INF];
  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt;= sourceLength ; i++) { score[i + 1] = []; score[i + 1][1] = i; score[i + 1][0] = INF; }
  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt;= targetLength ; i++) { score[1][i + 1] = i; score[0][i + 1] = INF; }

  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; sd = {};
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; combinedStrings = source + target;
  &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; combinedStringsLength = combinedStrings.length;
  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=0 ; i &amp;lt; combinedStringsLength ; i++) {
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; letter = combinedStrings[i];
    &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (!sd.hasOwnProperty(letter))
      sd[letter] = 0;
  }

  &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i=1 ; i &amp;lt;= sourceLength ; i++) {
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; DB = 0;
    &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; j=1 ; j &amp;lt;= targetLength ; j++) {
      &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; i1 = sd[target[j - 1]];
      &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; j1 = DB;

      &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt; (source[i - 1] == target[j - 1]) {
        score[i + 1][j + 1] = score[i][j];
        DB = j;
      }
      &lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt;
        score[i + 1][j + 1] = Math.min(score[i][j], Math.min(score[i + 1][j], score[i][j + 1])) + 1;

      score[i + 1][j + 1] = Math.min(score[i + 1][j + 1], score[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1));
    }
    sd[source[i - 1]] = i;
  }
  &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; score[sourceLength + 1][targetLength + 1];
}
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>HTML Sticky Headers</title>
      <link>https://davidhampgonsalves.github.io/posts/sticky-headers/</link>
      <pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://davidhampgonsalves.github.io/posts/sticky-headers/</guid>
      <description>

&lt;p&gt;Sticky headers are heading elements that stick to the top of the window as the user scrolls down the page. This is useful since you can use them to retain the contextual information of the section regardless of the position.&lt;/p&gt;

&lt;p&gt;In my case I needed to have multiple headers in the hourly forecast list for &lt;a href=&#34;http://www.hourweather.com/&#34;&gt;hourweather.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found there wasn&amp;rsquo;t much out there about this topic, especially when you want to have multiple sticky headers per page so I thought I&amp;rsquo;d share my implementation(which is pretty rough) for others to reference for the main ideas.&lt;/p&gt;

&lt;h2 id=&#34;basic-concept&#34;&gt;Basic Concept&lt;/h2&gt;

&lt;p&gt;Sticky headers basically work by toggling the headers position type when it reaches the top of the window to fixed so that it sticks in place. The rest of the logic really just handles the flipping from one stuck headers to the next as the scrolling continues up or down the page.&lt;/p&gt;

&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Check out &lt;a href=&#34;http://www.hourweather.com/&#34;&gt;hourweather.com&lt;/a&gt; as its used in the hourly forecast listings.&lt;/p&gt;

&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;This code uses JQuery since I was already using it on the page. You could remove the references pretty easily since I only used some selectors and CSS manipulations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; setupStickyHeaders() {
    &lt;span style=&#34;font-style: italic&#34;&gt;//get initial offset positions of the headers&lt;/span&gt;
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; headers = [];
    $.each($(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;div.day-start&amp;#39;&lt;/span&gt;), &lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt;(i, headerDiv) {
        &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; header = $(headerDiv);
        headers.push({element&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:header, orgOffset&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;: header.offset().top});
    });

    &lt;span style=&#34;font-style: italic&#34;&gt;//if no headers on this page then stop&lt;/span&gt;
    &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(headers.length == 0)
        &lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt;;

    &lt;span style=&#34;font-style: italic&#34;&gt;//get the original css for the&lt;/span&gt;
    &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; orgCSS = {width&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:headers[0].element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;), position&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:headers[0].element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;), height&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;\&lt;/span&gt;:headers[0].element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;height&amp;#39;&lt;/span&gt;)};

    &lt;span style=&#34;font-style: italic&#34;&gt;//handle scrolling&lt;/span&gt;
    $(window).scroll(&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt;(){
        &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; scrollTop = $(&lt;span style=&#34;font-weight: bold&#34;&gt;this&lt;/span&gt;).scrollTop();


        &lt;span style=&#34;font-style: italic&#34;&gt;//unstick headers&lt;/span&gt;
        &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;font-weight: bold&#34;&gt;in&lt;/span&gt; headers) {
            &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; header = headers[i];
            &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(!isStuck(header)) &lt;span style=&#34;font-weight: bold&#34;&gt;break&lt;/span&gt;;

            &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(scrollTop &amp;lt; header.orgOffset) {
                header.element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;, orgCSS.position).css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;,&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;).prev().remove();
                &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(i &amp;gt; 0)
                    headers[i-1].element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;z-index&amp;#39;&lt;/span&gt;, 1);
            }
        }

        &lt;span style=&#34;font-style: italic&#34;&gt;//stick headers&lt;/span&gt;
        &lt;span style=&#34;font-weight: bold&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;font-weight: bold&#34;&gt;in&lt;/span&gt; headers) {
            &lt;span style=&#34;font-weight: bold&#34;&gt;var&lt;/span&gt; header = headers[i];
            &lt;span style=&#34;font-style: italic&#34;&gt;//make sure any stuck headers are stuck in the right place(fast scrolling sometimes messes this up)&lt;/span&gt;
            &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(isStuck(header))
                header.element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;,&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)

            &lt;span style=&#34;font-style: italic&#34;&gt;//skip this header if its bellow the top of the window&lt;/span&gt;
            &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(scrollTop &amp;lt; header.orgOffset - parseInt(orgCSS.height))
                &lt;span style=&#34;font-weight: bold&#34;&gt;break&lt;/span&gt;;

            &lt;span style=&#34;font-style: italic&#34;&gt;//if the header is already stuck then ignore it&lt;/span&gt;
            &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(!isStuck(header)) {
                &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(scrollTop &amp;gt; header.orgOffset) {
                    &lt;span style=&#34;font-style: italic&#34;&gt;//stick the header&lt;/span&gt;
                    header.element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;width&amp;#39;&lt;/span&gt;, orgCSS.width).css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;, &lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;fixed&amp;#39;&lt;/span&gt;).css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;,&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;).before(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;&amp;lt;div class=day-start&amp;gt; &amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;);
                    &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(i &amp;gt; 0)
                        headers[i-1].element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;z-index&amp;#39;&lt;/span&gt;, -1);
                }&lt;span style=&#34;font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;font-weight: bold&#34;&gt;if&lt;/span&gt;(i &amp;gt; 0)
                    &lt;span style=&#34;font-style: italic&#34;&gt;//hide the element since it should be off the screen now&lt;/span&gt;
                    headers[i-1].element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;, header.orgOffset - scrollTop - parseInt(orgCSS.height));
            }
        }
    });
}

&lt;span style=&#34;font-weight: bold&#34;&gt;function&lt;/span&gt; isStuck(header) {&lt;span style=&#34;font-weight: bold&#34;&gt;return&lt;/span&gt; header.element.css(&lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;) === &lt;span style=&#34;font-style: italic&#34;&gt;&amp;#39;fixed&amp;#39;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>